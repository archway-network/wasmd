// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gastracker/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Denotes which operation consumed this gas
type ContractOperation int32

const (
	// Invalid or unknown operation
	ContractOperation_CONTRACT_OPERATION_UNSPECIFIED ContractOperation = 0
	// Initialization of the contract
	ContractOperation_CONTRACT_OPERATION_INSTANTIATION ContractOperation = 1
	// Execution of the contract
	ContractOperation_CONTRACT_OPERATION_EXECUTION ContractOperation = 2
	// Querying the contract
	ContractOperation_CONTRACT_OPERATION_QUERY ContractOperation = 3
	// Migrating the contract
	ContractOperation_CONTRACT_OPERATION_MIGRATE ContractOperation = 4
	// IBC operation
	ContractOperation_CONTRACT_OPERATION_IBC ContractOperation = 5
	// Sudo operation
	ContractOperation_CONTRACT_OPERATION_SUDO ContractOperation = 6
	// Reply operation
	ContractOperation_CONTRACT_OPERATION_REPLY ContractOperation = 7
)

var ContractOperation_name = map[int32]string{
	0: "CONTRACT_OPERATION_UNSPECIFIED",
	1: "CONTRACT_OPERATION_INSTANTIATION",
	2: "CONTRACT_OPERATION_EXECUTION",
	3: "CONTRACT_OPERATION_QUERY",
	4: "CONTRACT_OPERATION_MIGRATE",
	5: "CONTRACT_OPERATION_IBC",
	6: "CONTRACT_OPERATION_SUDO",
	7: "CONTRACT_OPERATION_REPLY",
}

var ContractOperation_value = map[string]int32{
	"CONTRACT_OPERATION_UNSPECIFIED":   0,
	"CONTRACT_OPERATION_INSTANTIATION": 1,
	"CONTRACT_OPERATION_EXECUTION":     2,
	"CONTRACT_OPERATION_QUERY":         3,
	"CONTRACT_OPERATION_MIGRATE":       4,
	"CONTRACT_OPERATION_IBC":           5,
	"CONTRACT_OPERATION_SUDO":          6,
	"CONTRACT_OPERATION_REPLY":         7,
}

func (x ContractOperation) String() string {
	return proto.EnumName(ContractOperation_name, int32(x))
}

func (ContractOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{0}
}

// Tracking contract gas usage and total gas consumption per transaction
type TransactionTracking struct {
	MaxGasAllowed         uint64                 `protobuf:"varint,1,opt,name=max_gas_allowed,json=maxGasAllowed,proto3" json:"max_gas_allowed,omitempty"`
	MaxContractRewards    []*types.DecCoin       `protobuf:"bytes,3,rep,name=max_contract_rewards,json=maxContractRewards,proto3" json:"max_contract_rewards,omitempty"`
	ContractTrackingInfos []*ContractGasTracking `protobuf:"bytes,4,rep,name=contract_tracking_infos,json=contractTrackingInfos,proto3" json:"contract_tracking_infos,omitempty"`
}

func (m *TransactionTracking) Reset()         { *m = TransactionTracking{} }
func (m *TransactionTracking) String() string { return proto.CompactTextString(m) }
func (*TransactionTracking) ProtoMessage()    {}
func (*TransactionTracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{0}
}
func (m *TransactionTracking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionTracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionTracking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionTracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionTracking.Merge(m, src)
}
func (m *TransactionTracking) XXX_Size() int {
	return m.Size()
}
func (m *TransactionTracking) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionTracking.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionTracking proto.InternalMessageInfo

func (m *TransactionTracking) GetMaxGasAllowed() uint64 {
	if m != nil {
		return m.MaxGasAllowed
	}
	return 0
}

func (m *TransactionTracking) GetMaxContractRewards() []*types.DecCoin {
	if m != nil {
		return m.MaxContractRewards
	}
	return nil
}

func (m *TransactionTracking) GetContractTrackingInfos() []*ContractGasTracking {
	if m != nil {
		return m.ContractTrackingInfos
	}
	return nil
}

// Tracking contract gas usage
type ContractGasTracking struct {
	Address     string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	GasConsumed uint64            `protobuf:"varint,2,opt,name=gas_consumed,json=gasConsumed,proto3" json:"gas_consumed,omitempty"`
	Operation   ContractOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=gastracker.ContractOperation" json:"operation,omitempty"`
}

func (m *ContractGasTracking) Reset()         { *m = ContractGasTracking{} }
func (m *ContractGasTracking) String() string { return proto.CompactTextString(m) }
func (*ContractGasTracking) ProtoMessage()    {}
func (*ContractGasTracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{1}
}
func (m *ContractGasTracking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractGasTracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractGasTracking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractGasTracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractGasTracking.Merge(m, src)
}
func (m *ContractGasTracking) XXX_Size() int {
	return m.Size()
}
func (m *ContractGasTracking) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractGasTracking.DiscardUnknown(m)
}

var xxx_messageInfo_ContractGasTracking proto.InternalMessageInfo

func (m *ContractGasTracking) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ContractGasTracking) GetGasConsumed() uint64 {
	if m != nil {
		return m.GasConsumed
	}
	return 0
}

func (m *ContractGasTracking) GetOperation() ContractOperation {
	if m != nil {
		return m.Operation
	}
	return ContractOperation_CONTRACT_OPERATION_UNSPECIFIED
}

// Tracking gas consumption for all tx in a particular block
type BlockGasTracking struct {
	TxTrackingInfos []*TransactionTracking `protobuf:"bytes,1,rep,name=tx_tracking_infos,json=txTrackingInfos,proto3" json:"tx_tracking_infos,omitempty"`
}

func (m *BlockGasTracking) Reset()         { *m = BlockGasTracking{} }
func (m *BlockGasTracking) String() string { return proto.CompactTextString(m) }
func (*BlockGasTracking) ProtoMessage()    {}
func (*BlockGasTracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{2}
}
func (m *BlockGasTracking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockGasTracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockGasTracking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockGasTracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockGasTracking.Merge(m, src)
}
func (m *BlockGasTracking) XXX_Size() int {
	return m.Size()
}
func (m *BlockGasTracking) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockGasTracking.DiscardUnknown(m)
}

var xxx_messageInfo_BlockGasTracking proto.InternalMessageInfo

func (m *BlockGasTracking) GetTxTrackingInfos() []*TransactionTracking {
	if m != nil {
		return m.TxTrackingInfos
	}
	return nil
}

// Custom Message returned by our wrapper vm
type ContractOperationInfo struct {
	GasConsumed uint64            `protobuf:"varint,1,opt,name=gas_consumed,json=gasConsumed,proto3" json:"gas_consumed,omitempty"`
	Operation   ContractOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=gastracker.ContractOperation" json:"operation,omitempty"`
	// Only set in case of instantiate operation
	RewardAddress string `protobuf:"bytes,3,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
}

func (m *ContractOperationInfo) Reset()         { *m = ContractOperationInfo{} }
func (m *ContractOperationInfo) String() string { return proto.CompactTextString(m) }
func (*ContractOperationInfo) ProtoMessage()    {}
func (*ContractOperationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{3}
}
func (m *ContractOperationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractOperationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractOperationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractOperationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractOperationInfo.Merge(m, src)
}
func (m *ContractOperationInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractOperationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractOperationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractOperationInfo proto.InternalMessageInfo

func (m *ContractOperationInfo) GetGasConsumed() uint64 {
	if m != nil {
		return m.GasConsumed
	}
	return 0
}

func (m *ContractOperationInfo) GetOperation() ContractOperation {
	if m != nil {
		return m.Operation
	}
	return ContractOperation_CONTRACT_OPERATION_UNSPECIFIED
}

func (m *ContractOperationInfo) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

// Custom wrapper around Query request
type GasTrackingQueryRequestWrapper struct {
	MagicString  string `protobuf:"bytes,1,opt,name=magic_string,json=magicString,proto3" json:"magic_string,omitempty"`
	QueryRequest []byte `protobuf:"bytes,2,opt,name=query_request,json=queryRequest,proto3" json:"query_request,omitempty"`
}

func (m *GasTrackingQueryRequestWrapper) Reset()         { *m = GasTrackingQueryRequestWrapper{} }
func (m *GasTrackingQueryRequestWrapper) String() string { return proto.CompactTextString(m) }
func (*GasTrackingQueryRequestWrapper) ProtoMessage()    {}
func (*GasTrackingQueryRequestWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{4}
}
func (m *GasTrackingQueryRequestWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasTrackingQueryRequestWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasTrackingQueryRequestWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasTrackingQueryRequestWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasTrackingQueryRequestWrapper.Merge(m, src)
}
func (m *GasTrackingQueryRequestWrapper) XXX_Size() int {
	return m.Size()
}
func (m *GasTrackingQueryRequestWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_GasTrackingQueryRequestWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_GasTrackingQueryRequestWrapper proto.InternalMessageInfo

func (m *GasTrackingQueryRequestWrapper) GetMagicString() string {
	if m != nil {
		return m.MagicString
	}
	return ""
}

func (m *GasTrackingQueryRequestWrapper) GetQueryRequest() []byte {
	if m != nil {
		return m.QueryRequest
	}
	return nil
}

// Custom wrapper around Query result that also gives gas consumption
type GasTrackingQueryResultWrapper struct {
	GasConsumed   uint64 `protobuf:"varint,1,opt,name=gas_consumed,json=gasConsumed,proto3" json:"gas_consumed,omitempty"`
	QueryResponse []byte `protobuf:"bytes,2,opt,name=query_response,json=queryResponse,proto3" json:"query_response,omitempty"`
}

func (m *GasTrackingQueryResultWrapper) Reset()         { *m = GasTrackingQueryResultWrapper{} }
func (m *GasTrackingQueryResultWrapper) String() string { return proto.CompactTextString(m) }
func (*GasTrackingQueryResultWrapper) ProtoMessage()    {}
func (*GasTrackingQueryResultWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{5}
}
func (m *GasTrackingQueryResultWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasTrackingQueryResultWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasTrackingQueryResultWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasTrackingQueryResultWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasTrackingQueryResultWrapper.Merge(m, src)
}
func (m *GasTrackingQueryResultWrapper) XXX_Size() int {
	return m.Size()
}
func (m *GasTrackingQueryResultWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_GasTrackingQueryResultWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_GasTrackingQueryResultWrapper proto.InternalMessageInfo

func (m *GasTrackingQueryResultWrapper) GetGasConsumed() uint64 {
	if m != nil {
		return m.GasConsumed
	}
	return 0
}

func (m *GasTrackingQueryResultWrapper) GetQueryResponse() []byte {
	if m != nil {
		return m.QueryResponse
	}
	return nil
}

// Custom wrapper around contract instantiation request
type ContractInstantiationRequestWrapper struct {
	RewardAddress string `protobuf:"bytes,1,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
	// Base64 encoding of instantiation data
	InstantiationRequest string `protobuf:"bytes,2,opt,name=instantiation_request,json=instantiationRequest,proto3" json:"instantiation_request,omitempty"`
}

func (m *ContractInstantiationRequestWrapper) Reset()         { *m = ContractInstantiationRequestWrapper{} }
func (m *ContractInstantiationRequestWrapper) String() string { return proto.CompactTextString(m) }
func (*ContractInstantiationRequestWrapper) ProtoMessage()    {}
func (*ContractInstantiationRequestWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{6}
}
func (m *ContractInstantiationRequestWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInstantiationRequestWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInstantiationRequestWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInstantiationRequestWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInstantiationRequestWrapper.Merge(m, src)
}
func (m *ContractInstantiationRequestWrapper) XXX_Size() int {
	return m.Size()
}
func (m *ContractInstantiationRequestWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInstantiationRequestWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInstantiationRequestWrapper proto.InternalMessageInfo

func (m *ContractInstantiationRequestWrapper) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

func (m *ContractInstantiationRequestWrapper) GetInstantiationRequest() string {
	if m != nil {
		return m.InstantiationRequest
	}
	return ""
}

// Contract instance metadata
type ContractInstanceMetadata struct {
	RewardAddress string `protobuf:"bytes,1,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
}

func (m *ContractInstanceMetadata) Reset()         { *m = ContractInstanceMetadata{} }
func (m *ContractInstanceMetadata) String() string { return proto.CompactTextString(m) }
func (*ContractInstanceMetadata) ProtoMessage()    {}
func (*ContractInstanceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{7}
}
func (m *ContractInstanceMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInstanceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInstanceMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInstanceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInstanceMetadata.Merge(m, src)
}
func (m *ContractInstanceMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ContractInstanceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInstanceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInstanceMetadata proto.InternalMessageInfo

func (m *ContractInstanceMetadata) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

// Reward entry per beneficiary address
type LeftOverRewardEntry struct {
	ContractRewards []*types.DecCoin `protobuf:"bytes,1,rep,name=contract_rewards,json=contractRewards,proto3" json:"contract_rewards,omitempty"`
}

func (m *LeftOverRewardEntry) Reset()         { *m = LeftOverRewardEntry{} }
func (m *LeftOverRewardEntry) String() string { return proto.CompactTextString(m) }
func (*LeftOverRewardEntry) ProtoMessage()    {}
func (*LeftOverRewardEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{8}
}
func (m *LeftOverRewardEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeftOverRewardEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeftOverRewardEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeftOverRewardEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeftOverRewardEntry.Merge(m, src)
}
func (m *LeftOverRewardEntry) XXX_Size() int {
	return m.Size()
}
func (m *LeftOverRewardEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LeftOverRewardEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LeftOverRewardEntry proto.InternalMessageInfo

func (m *LeftOverRewardEntry) GetContractRewards() []*types.DecCoin {
	if m != nil {
		return m.ContractRewards
	}
	return nil
}

// Event emitted when Reward is allocated
type RewardDistributionEvent struct {
	RewardAddress   string           `protobuf:"bytes,1,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
	ContractRewards []*types.Coin    `protobuf:"bytes,2,rep,name=contract_rewards,json=contractRewards,proto3" json:"contract_rewards,omitempty"`
	LeftoverRewards []*types.DecCoin `protobuf:"bytes,3,rep,name=leftover_rewards,json=leftoverRewards,proto3" json:"leftover_rewards,omitempty"`
}

func (m *RewardDistributionEvent) Reset()         { *m = RewardDistributionEvent{} }
func (m *RewardDistributionEvent) String() string { return proto.CompactTextString(m) }
func (*RewardDistributionEvent) ProtoMessage()    {}
func (*RewardDistributionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd1f8edffbcb0ca, []int{9}
}
func (m *RewardDistributionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardDistributionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardDistributionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardDistributionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardDistributionEvent.Merge(m, src)
}
func (m *RewardDistributionEvent) XXX_Size() int {
	return m.Size()
}
func (m *RewardDistributionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardDistributionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RewardDistributionEvent proto.InternalMessageInfo

func (m *RewardDistributionEvent) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

func (m *RewardDistributionEvent) GetContractRewards() []*types.Coin {
	if m != nil {
		return m.ContractRewards
	}
	return nil
}

func (m *RewardDistributionEvent) GetLeftoverRewards() []*types.DecCoin {
	if m != nil {
		return m.LeftoverRewards
	}
	return nil
}

func init() {
	proto.RegisterEnum("gastracker.ContractOperation", ContractOperation_name, ContractOperation_value)
	proto.RegisterType((*TransactionTracking)(nil), "gastracker.TransactionTracking")
	proto.RegisterType((*ContractGasTracking)(nil), "gastracker.ContractGasTracking")
	proto.RegisterType((*BlockGasTracking)(nil), "gastracker.BlockGasTracking")
	proto.RegisterType((*ContractOperationInfo)(nil), "gastracker.ContractOperationInfo")
	proto.RegisterType((*GasTrackingQueryRequestWrapper)(nil), "gastracker.GasTrackingQueryRequestWrapper")
	proto.RegisterType((*GasTrackingQueryResultWrapper)(nil), "gastracker.GasTrackingQueryResultWrapper")
	proto.RegisterType((*ContractInstantiationRequestWrapper)(nil), "gastracker.ContractInstantiationRequestWrapper")
	proto.RegisterType((*ContractInstanceMetadata)(nil), "gastracker.ContractInstanceMetadata")
	proto.RegisterType((*LeftOverRewardEntry)(nil), "gastracker.LeftOverRewardEntry")
	proto.RegisterType((*RewardDistributionEvent)(nil), "gastracker.RewardDistributionEvent")
}

func init() { proto.RegisterFile("gastracker/types.proto", fileDescriptor_cdd1f8edffbcb0ca) }

var fileDescriptor_cdd1f8edffbcb0ca = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xd6, 0x4a, 0x6e, 0x02, 0x8f, 0x2d, 0x8b, 0x59, 0xc7, 0x31, 0xeb, 0x3a, 0xac, 0xca, 0x34,
	0x85, 0x51, 0x14, 0x24, 0x92, 0x1c, 0x7b, 0x92, 0x29, 0x46, 0x20, 0x9a, 0x48, 0x0e, 0x45, 0xc1,
	0x4d, 0x0f, 0x25, 0x56, 0xd4, 0x5a, 0x21, 0x22, 0x72, 0xe5, 0xdd, 0x95, 0x2c, 0x1f, 0xfb, 0x04,
	0xed, 0xa1, 0xe7, 0x3e, 0x4f, 0x6f, 0xcd, 0xb1, 0xc7, 0xc2, 0x06, 0xfa, 0x1c, 0x05, 0xff, 0x6a,
	0x29, 0x62, 0x10, 0xe7, 0x26, 0xce, 0xce, 0x37, 0xdf, 0xcf, 0x6a, 0x48, 0x78, 0x30, 0x26, 0x42,
	0x72, 0x12, 0xbc, 0xa5, 0xdc, 0x94, 0x97, 0x53, 0x2a, 0x8c, 0x29, 0x67, 0x92, 0x61, 0xb8, 0xa9,
	0x1f, 0x68, 0x01, 0x13, 0x11, 0x13, 0xe6, 0x90, 0x08, 0x6a, 0xce, 0x9f, 0x0c, 0xa9, 0x24, 0x4f,
	0xcc, 0x80, 0x85, 0x71, 0xd6, 0xab, 0xff, 0x8b, 0x60, 0xd7, 0xe3, 0x24, 0x16, 0x24, 0x90, 0x21,
	0x8b, 0xbd, 0x04, 0x16, 0xc6, 0x63, 0xfc, 0x0d, 0x34, 0x22, 0xb2, 0xf0, 0xc7, 0x44, 0xf8, 0x64,
	0x32, 0x61, 0x17, 0x74, 0xa4, 0xa2, 0x26, 0x3a, 0xda, 0x70, 0xeb, 0x11, 0x59, 0x74, 0x88, 0x68,
	0x65, 0x45, 0xdc, 0x85, 0xfb, 0x49, 0x5f, 0xc0, 0xe2, 0x84, 0x51, 0xfa, 0x9c, 0x5e, 0x10, 0x3e,
	0x12, 0x6a, 0xad, 0x59, 0x3b, 0xda, 0x7a, 0x7a, 0x68, 0x64, 0xf4, 0x46, 0x42, 0x6f, 0xe4, 0xf4,
	0x46, 0x9b, 0x06, 0x16, 0x0b, 0x63, 0x17, 0x47, 0x64, 0x61, 0xe5, 0x40, 0x37, 0xc3, 0xe1, 0x53,
	0xd8, 0xff, 0x7f, 0x96, 0xcc, 0xc5, 0xf8, 0x61, 0x7c, 0xc6, 0x84, 0xba, 0x91, 0x8e, 0xfc, 0xd2,
	0xb8, 0x71, 0x67, 0x14, 0xe8, 0x0e, 0x11, 0x85, 0x72, 0x77, 0xaf, 0xc0, 0x17, 0x15, 0x27, 0x41,
	0xeb, 0xbf, 0x22, 0xd8, 0x2d, 0x69, 0xc7, 0x2a, 0xdc, 0x25, 0xa3, 0x11, 0xa7, 0x42, 0xa4, 0x06,
	0x37, 0xdd, 0xe2, 0x11, 0x7f, 0x05, 0xdb, 0x89, 0xfd, 0x80, 0xc5, 0x62, 0x16, 0xd1, 0x91, 0x5a,
	0x4d, 0xfd, 0x6f, 0x8d, 0x89, 0xb0, 0xf2, 0x12, 0xfe, 0x1e, 0x36, 0xd9, 0x94, 0x72, 0x92, 0x44,
	0xa7, 0xd6, 0x9a, 0xe8, 0x68, 0xe7, 0xe9, 0xc3, 0x32, 0x7d, 0xbd, 0xa2, 0xc9, 0xbd, 0xe9, 0xd7,
	0x7d, 0x50, 0x8e, 0x27, 0x2c, 0x78, 0xbb, 0xac, 0xe6, 0x07, 0xb8, 0x27, 0x17, 0xef, 0x1b, 0x47,
	0xeb, 0xc6, 0x4b, 0xae, 0xcc, 0x6d, 0xc8, 0xc5, 0xaa, 0xe5, 0x3f, 0x10, 0xec, 0xad, 0x29, 0x48,
	0x8e, 0xd6, 0xac, 0xa1, 0x8f, 0x58, 0xab, 0x7e, 0x9a, 0x35, 0xfc, 0x18, 0x76, 0xb2, 0x3f, 0x82,
	0x5f, 0x64, 0x5b, 0x4b, 0xb3, 0xad, 0x67, 0xd5, 0x56, 0x56, 0xd4, 0xdf, 0x80, 0xb6, 0x64, 0xfe,
	0xd5, 0x8c, 0xf2, 0x4b, 0x97, 0x9e, 0xcf, 0xa8, 0x90, 0xa7, 0x9c, 0x4c, 0xa7, 0x94, 0x27, 0x42,
	0x23, 0x32, 0x0e, 0x03, 0x5f, 0x48, 0x1e, 0xc6, 0xe3, 0xfc, 0x8a, 0xb6, 0xd2, 0x5a, 0x3f, 0x2d,
	0xe1, 0x47, 0x50, 0x3f, 0x4f, 0x90, 0x3e, 0xcf, 0xa0, 0xa9, 0xd8, 0x6d, 0x77, 0xfb, 0x7c, 0x69,
	0x9c, 0x1e, 0xc2, 0xc3, 0x75, 0x26, 0x31, 0x9b, 0x2c, 0x13, 0x7d, 0x2c, 0x91, 0xc7, 0xb0, 0x53,
	0x10, 0x89, 0x29, 0x8b, 0x05, 0xcd, 0x99, 0xea, 0x39, 0x53, 0x56, 0xd4, 0x7f, 0x41, 0xf0, 0xa8,
	0x08, 0xc7, 0x89, 0x85, 0x24, 0xb1, 0x0c, 0xb3, 0x80, 0x56, 0xad, 0xad, 0x67, 0x84, 0x4a, 0x32,
	0xc2, 0xcf, 0x60, 0x2f, 0x5c, 0x9e, 0xb2, 0x62, 0x73, 0xd3, 0xbd, 0x1f, 0x96, 0x50, 0xe8, 0x2d,
	0x50, 0x57, 0x25, 0x04, 0xf4, 0x25, 0x95, 0x64, 0x44, 0x24, 0xb9, 0x25, 0xaf, 0xfe, 0x33, 0xec,
	0xbe, 0xa0, 0x67, 0xb2, 0x37, 0xa7, 0x3c, 0xdb, 0x4d, 0x3b, 0x96, 0xfc, 0x12, 0x77, 0x40, 0x59,
	0xdb, 0x75, 0x74, 0x8b, 0x5d, 0x6f, 0x04, 0xab, 0x8b, 0xae, 0xff, 0x85, 0x60, 0x3f, 0xfb, 0xdd,
	0x0e, 0x93, 0xcb, 0x1d, 0xce, 0x12, 0x03, 0xf6, 0x9c, 0xc6, 0xf2, 0xb6, 0xd1, 0xb4, 0x4b, 0xb4,
	0x54, 0x53, 0x2d, 0x9f, 0x97, 0x6a, 0x29, 0x15, 0x92, 0x38, 0x9a, 0xd0, 0x33, 0xc9, 0xe6, 0x94,
	0x7f, 0xd2, 0xdb, 0xab, 0x51, 0xa0, 0xf2, 0x41, 0xdf, 0xfe, 0x5e, 0x85, 0x7b, 0x6b, 0x5b, 0x81,
	0x75, 0xd0, 0xac, 0x5e, 0xd7, 0x73, 0x5b, 0x96, 0xe7, 0xf7, 0x4e, 0x6c, 0xb7, 0xe5, 0x39, 0xbd,
	0xae, 0x3f, 0xe8, 0xf6, 0x4f, 0x6c, 0xcb, 0x79, 0xee, 0xd8, 0x6d, 0xa5, 0x82, 0xbf, 0x86, 0x66,
	0x49, 0x8f, 0xd3, 0xed, 0x7b, 0xad, 0xae, 0xe7, 0xa4, 0x4f, 0x0a, 0xc2, 0x4d, 0x38, 0x2c, 0xe9,
	0xb2, 0x7f, 0xb4, 0xad, 0x41, 0xda, 0x51, 0xc5, 0x87, 0xa0, 0x96, 0x74, 0xbc, 0x1a, 0xd8, 0xee,
	0x6b, 0xa5, 0x86, 0x35, 0x38, 0x28, 0x39, 0x7d, 0xe9, 0x74, 0xdc, 0x96, 0x67, 0x2b, 0x1b, 0xf8,
	0x00, 0x1e, 0x94, 0xa9, 0x38, 0xb6, 0x94, 0xcf, 0xf0, 0x17, 0xb0, 0x5f, 0x72, 0xd6, 0x1f, 0xb4,
	0x7b, 0xca, 0x9d, 0x0f, 0xd0, 0xba, 0xf6, 0xc9, 0x8b, 0xd7, 0xca, 0xdd, 0xe3, 0xe7, 0x7f, 0x5e,
	0x69, 0xe8, 0xdd, 0x95, 0x86, 0xfe, 0xb9, 0xd2, 0xd0, 0x6f, 0xd7, 0x5a, 0xe5, 0xdd, 0xb5, 0x56,
	0xf9, 0xfb, 0x5a, 0xab, 0xfc, 0xf4, 0xdd, 0x38, 0x94, 0x6f, 0x66, 0x43, 0x23, 0x60, 0x91, 0x69,
	0x31, 0x11, 0x9d, 0x12, 0x11, 0x99, 0x17, 0x44, 0x44, 0x23, 0x73, 0x61, 0xbe, 0xff, 0x6d, 0x1b,
	0xde, 0x49, 0x3f, 0x58, 0xcf, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x74, 0x95, 0x71, 0x06, 0xf6,
	0x06, 0x00, 0x00,
}

func (m *TransactionTracking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionTracking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionTracking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractTrackingInfos) > 0 {
		for iNdEx := len(m.ContractTrackingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractTrackingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MaxContractRewards) > 0 {
		for iNdEx := len(m.MaxContractRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxContractRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaxGasAllowed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxGasAllowed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractGasTracking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractGasTracking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractGasTracking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x18
	}
	if m.GasConsumed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasConsumed))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockGasTracking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockGasTracking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockGasTracking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxTrackingInfos) > 0 {
		for iNdEx := len(m.TxTrackingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxTrackingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractOperationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractOperationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractOperationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Operation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x10
	}
	if m.GasConsumed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasConsumed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GasTrackingQueryRequestWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasTrackingQueryRequestWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasTrackingQueryRequestWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryRequest) > 0 {
		i -= len(m.QueryRequest)
		copy(dAtA[i:], m.QueryRequest)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.QueryRequest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MagicString) > 0 {
		i -= len(m.MagicString)
		copy(dAtA[i:], m.MagicString)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MagicString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasTrackingQueryResultWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasTrackingQueryResultWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasTrackingQueryResultWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryResponse) > 0 {
		i -= len(m.QueryResponse)
		copy(dAtA[i:], m.QueryResponse)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.QueryResponse)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasConsumed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasConsumed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractInstantiationRequestWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInstantiationRequestWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInstantiationRequestWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InstantiationRequest) > 0 {
		i -= len(m.InstantiationRequest)
		copy(dAtA[i:], m.InstantiationRequest)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InstantiationRequest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractInstanceMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInstanceMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInstanceMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeftOverRewardEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeftOverRewardEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeftOverRewardEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractRewards) > 0 {
		for iNdEx := len(m.ContractRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardDistributionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardDistributionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardDistributionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeftoverRewards) > 0 {
		for iNdEx := len(m.LeftoverRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeftoverRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ContractRewards) > 0 {
		for iNdEx := len(m.ContractRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransactionTracking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxGasAllowed != 0 {
		n += 1 + sovTypes(uint64(m.MaxGasAllowed))
	}
	if len(m.MaxContractRewards) > 0 {
		for _, e := range m.MaxContractRewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ContractTrackingInfos) > 0 {
		for _, e := range m.ContractTrackingInfos {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ContractGasTracking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.GasConsumed != 0 {
		n += 1 + sovTypes(uint64(m.GasConsumed))
	}
	if m.Operation != 0 {
		n += 1 + sovTypes(uint64(m.Operation))
	}
	return n
}

func (m *BlockGasTracking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxTrackingInfos) > 0 {
		for _, e := range m.TxTrackingInfos {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ContractOperationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasConsumed != 0 {
		n += 1 + sovTypes(uint64(m.GasConsumed))
	}
	if m.Operation != 0 {
		n += 1 + sovTypes(uint64(m.Operation))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GasTrackingQueryRequestWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MagicString)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.QueryRequest)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GasTrackingQueryResultWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasConsumed != 0 {
		n += 1 + sovTypes(uint64(m.GasConsumed))
	}
	l = len(m.QueryResponse)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ContractInstantiationRequestWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InstantiationRequest)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ContractInstanceMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LeftOverRewardEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractRewards) > 0 {
		for _, e := range m.ContractRewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RewardDistributionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ContractRewards) > 0 {
		for _, e := range m.ContractRewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.LeftoverRewards) > 0 {
		for _, e := range m.LeftoverRewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionTracking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionTracking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionTracking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasAllowed", wireType)
			}
			m.MaxGasAllowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasAllowed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContractRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxContractRewards = append(m.MaxContractRewards, &types.DecCoin{})
			if err := m.MaxContractRewards[len(m.MaxContractRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTrackingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTrackingInfos = append(m.ContractTrackingInfos, &ContractGasTracking{})
			if err := m.ContractTrackingInfos[len(m.ContractTrackingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractGasTracking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractGasTracking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractGasTracking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumed", wireType)
			}
			m.GasConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= ContractOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockGasTracking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockGasTracking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockGasTracking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxTrackingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxTrackingInfos = append(m.TxTrackingInfos, &TransactionTracking{})
			if err := m.TxTrackingInfos[len(m.TxTrackingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractOperationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractOperationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractOperationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumed", wireType)
			}
			m.GasConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= ContractOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasTrackingQueryRequestWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasTrackingQueryRequestWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasTrackingQueryRequestWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MagicString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRequest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryRequest = append(m.QueryRequest[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryRequest == nil {
				m.QueryRequest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasTrackingQueryResultWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasTrackingQueryResultWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasTrackingQueryResultWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumed", wireType)
			}
			m.GasConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResponse = append(m.QueryResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryResponse == nil {
				m.QueryResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInstantiationRequestWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInstantiationRequestWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInstantiationRequestWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiationRequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstantiationRequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInstanceMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInstanceMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInstanceMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeftOverRewardEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeftOverRewardEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeftOverRewardEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractRewards = append(m.ContractRewards, &types.DecCoin{})
			if err := m.ContractRewards[len(m.ContractRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardDistributionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardDistributionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardDistributionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractRewards = append(m.ContractRewards, &types.Coin{})
			if err := m.ContractRewards[len(m.ContractRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftoverRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftoverRewards = append(m.LeftoverRewards, &types.DecCoin{})
			if err := m.LeftoverRewards[len(m.LeftoverRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
